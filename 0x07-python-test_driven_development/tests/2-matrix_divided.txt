The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------
Importing the function from the module:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking for module docstring:
	 >>> m = __import__("2-matrix_divided").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	>>> f = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> len(f) > 1
	True

Checking for regular division:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Checking for passing 0 as div:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

Checking for 1 arg:
	>>> matrix_divided(2)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Checking for no arg:
	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Checking for passing string as div:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "hello")
	Traceback (most recent call last):
	 ...
	TypeError: div must be a number

Checking for passing string in matrix:
	>>> matrix_divided([[3, '9'], [15, 3]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for rect matrix:
	>>> matrix_divided([[3, 9, 7], [15, 3]], 2)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

Checking:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
